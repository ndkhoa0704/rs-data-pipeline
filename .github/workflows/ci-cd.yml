name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-rust-flows:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust-flows/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Build Rust flows
      run: |
        cd rust-flows
        cargo build --release
    
    - name: Upload Rust binaries
      uses: actions/upload-artifact@v3
      with:
        name: rust-binaries
        path: rust-flows/target/release/rust-flows
        retention-days: 7

  deploy:
    needs: build-rust-flows
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: data_pipeline_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Download Rust binaries
      uses: actions/download-artifact@v3
      with:
        name: rust-binaries
        path: ./binaries
    
    - name: Make binaries executable
      run: chmod +x ./binaries/rust-flows
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Test database connection
      run: |
        cd backend
        NODE_ENV=test DB_NAME=data_pipeline_test node -e "const { testConnection } = require('./config/database'); testConnection().then(() => process.exit(0)).catch(err => { console.error(err); process.exit(1); });"
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Deploy to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        source: "backend/,frontend/,binaries/"
        target: "/opt/data-pipeline"
        strip_components: 0
    
    - name: Setup database and restart services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        envs: DB_PASSWORD
        script: |
          cd /opt/data-pipeline
          
          # Install dependencies if needed
          cd backend && npm ci --production
          cd ../frontend && npm ci --production
          
          # Setup environment variables
          export DB_USER=postgres
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_NAME=data_pipeline
          
          # Restart services using PM2
          pm2 restart data-pipeline-backend || pm2 start backend/index.js --name data-pipeline-backend
          pm2 restart data-pipeline-frontend || pm2 start frontend/server.js --name data-pipeline-frontend
          
          # Save PM2 configuration
          pm2 save